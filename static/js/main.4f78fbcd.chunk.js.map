{"version":3,"sources":["components/Users/Users.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Login/Login.module.css","components/redux/dialogsReducer.tsx","components/Profile/Profile.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/NavBar.module.css","components/Navbar/NavBar.tsx","components/Friends/Friends.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","api/api.ts","components/redux/usersReducer.tsx","assets/images/no_foto.jpeg","components/common/locale/en_US.ts","components/Users/Users.tsx","components/common/preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/redux/profileReducer.tsx","components/redux/friendsReducer.tsx","components/redux/authReducer.tsx","components/redux/appReducer.tsx","components/redux/redux-store.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","dialogs","id","v1","name","url","messages","message","DialogsReducer","state","action","type","newMessageEl","addMessageAC","NavBar","props","isMe","useSelector","profilePage","friendsElement","friendsPage","friends","map","f","className","classes","friendsItems","friendsItem","src","alt","nav","item","activeClassName","activeLink","to","Friends","Music","News","Settings","axiosInstance","axios","create","withCredentials","baseURL","API","getProfileAPI","get","getStatusAPI","updateStatusAPI","status","put","getUsersAPI","page","pageSize","setUnfollowAPI","delete","setFollowAPI","post","getAuthMeAPI","Login","email","password","rememberMe","Logout","users","totalCount","currentPage","isFetching","followingInProgress","onChangeFollow","onChangeUnFollow","setCurrentPage","payload","setToggleFetching","setFollowingInProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","data","resultCode","getUsersTC","response","items","localInfo","items_per_page","jump_to","jump_to_confirm","prev_page","next_page","prev_5","next_5","prev_3","next_3","Users","React","memo","style","marginTop","alignSelf","showQuickJumper","defaultCurrent","total","locale","current","onChange","onPageChanged","u","path","container","item_img","img","photos","small","userDefaultPhoto","description","followed","disabled","some","s","unfollowedButton","onClick","unFollowCallback","button","followCallback","location_status","Preloader","display","justifyContent","alignItems","width","margin","UsersContainer","usersPage","useDispatch","useEffect","userId","pageNumber","posts","likeCount","profile","setStatusProfile","setIsMe","login","isAuth","setAuthUserData","setMessagesLogin","getAuthMeTC","initialized","rootReducer","combineReducers","newPost","filter","p","dialogsPage","auth","app","store","createStore","composeWithDevTools","applyMiddleware","thunk","ProfileStatus","useState","editMode","setEditMode","statusValue","setStatusValue","onBlur","updateStatusCB","autoFocus","value","e","currentTarget","onDoubleClick","ProfileInfo","Object","keys","length","avatar","large","fullName","contacts","vk","facebook","github","twitter","instagram","Post","MyPosts","useForm","register","handleSubmit","errors","formState","postElement","myPosts","onSubmit","addNewPost","placeholder","required","btnAddPost","MyPostsContainer","addPostAC","Profile","ProfileContainer","userID","useParams","myId","console","log","getProfile","getStatus","updateStatus","Header","header","logoutCB","HeaderContainer","LoginForm","mode","maxLength","errorMessage","DialogsContainer","lazy","then","default","App","promise","Promise","all","render","fallback","MainApp","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4f78fbcd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Users_container__2au3W\",\"item\":\"Users_item__fDEtC\",\"img\":\"Users_img__125zs\",\"description\":\"Users_description__3nKrj\",\"name\":\"Users_name__2diVe\",\"button\":\"Users_button__2PPuZ\",\"unfollowedButton\":\"Users_unfollowedButton__2fyoG\",\"location_status\":\"Users_location_status__3dHEX\",\"selectedPage\":\"Users_selectedPage__1FxV5\",\"unSelectedPage\":\"Users_unSelectedPage__3tOB_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2n_01\",\"container\":\"Header_container__1jQ7q\",\"login\":\"Header_login__16DP3\",\"activeLink\":\"Header_activeLink__1MFT-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__3w906\",\"avatar\":\"ProfileInfo_avatar__t3aHd\",\"description\":\"ProfileInfo_description__eppfX\",\"contacts\":\"ProfileInfo_contacts__2rd_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1xy60\",\"btnAddPost\":\"MyPosts_btnAddPost__b8cJh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1sApv\",\"errorMessage\":\"Login_errorMessage__1ODjk\"};","import {v1} from \"uuid\";\r\n\r\nexport type newMessageType = string;\r\nexport type dialogsPageType = {\r\n    dialogs: dialogType[],\r\n    messages: messageType[],\r\n}\r\nexport type dialogType = {\r\n    id: string,\r\n    name: string,\r\n    url: string\r\n}\r\nexport type messageType = {\r\n    id: string,\r\n    message: string\r\n}\r\nexport type AddMessageActionType = {\r\n    type: 'ADD-MESSAGE',\r\n    message: string,\r\n}\r\nexport type TotalActionMessageType = AddMessageActionType\r\nlet initialState = {\r\n        dialogs: [\r\n            {\r\n                id: v1(),\r\n                name: 'Dimych',\r\n                url: 'https://ict2go.ru/uploads/media/speakers_lid_image/0001/29/thumb_28624_speakers_lid_image_big.jpeg'\r\n            },\r\n            {\r\n                id: v1(),\r\n                name: 'Sheldon',\r\n                url: 'https://www.toledoblade.com/image/2015/01/29/ca939,66,2036,1753/People-Jim-Parsons.jpg'\r\n            },\r\n            {id: v1(), name: 'Penny', url: 'https://vsthemes.org/uploads/posts/2018-11/73024b2b44_kaley-cuoco.jpg'},\r\n            {\r\n                id: v1(),\r\n                name: 'Emy',\r\n                url: 'https://pagesix.com/wp-content/uploads/sites/3/2015/04/spl936619_028_105055833.jpg?quality=90&amp;strip=all&amp;w=680&amp;h=356&amp;crop=1g'\r\n            },\r\n            {\r\n                id: v1(),\r\n                name: 'Radj',\r\n                url: 'https://img.buzzfeed.com/buzzfeed-static/static/2017-03/27/11/asset/buzzfeed-prod-fastlane-01/sub-buzz-4277-1490629170-2.jpg'\r\n            },\r\n            {id: v1(), name: 'Howard', url: 'https://www.film.ru/sites/default/files/people/1565430-815776.jpg'},\r\n        ],\r\n        messages: [\r\n            {id: v1(), message: 'Hi'},\r\n            {id: v1(), message: 'How are you'},\r\n            {id: v1(), message: 'What is up?'}\r\n        ],\r\n    }\r\n\r\nexport const DialogsReducer = (state: dialogsPageType = initialState, action: TotalActionMessageType): dialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD-MESSAGE\": {\r\n            let newMessageEl: messageType = {\r\n                id: v1(),\r\n                message: action.message\r\n            }\r\n            return {\r\n                ...state,\r\n                messages:\r\n                    [...state.messages, newMessageEl],\r\n            }\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addMessageAC = (message:string): AddMessageActionType => {\r\n    return {\r\n        type: 'ADD-MESSAGE',\r\n        message:message,\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2Tnl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3OpdJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2u9Xi\",\"item\":\"NavBar_item__2rkTy\",\"activeLink\":\"NavBar_activeLink__13GNe\",\"friendsItems\":\"NavBar_friendsItems__3AUXs\",\"friendsItem\":\"NavBar_friendsItem__1qxWD\"};","import React from \"react\";\r\nimport classes from './NavBar.module.css';\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport {friendsPageType} from \"../redux/friendsReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    friendsPage: friendsPageType\r\n}\r\n\r\nconst NavBar = (props: PropsType) => {\r\n    const isMe = useSelector<AppStateType, boolean>((state) => state.profilePage.isMe)\r\n    const friendsElement = props.friendsPage.friends.map(f => {\r\n        return (\r\n            <div className={classes.friendsItems} key={f.id}>\r\n                <div className={classes.friendsItem}>\r\n                    <img src={f.url} alt=\"logoFriend\"/>\r\n                    <div>{f.name}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}><NavLink activeClassName={classes.activeLink}\r\n            to=\"/profile\">\r\n                {isMe? 'Profile - my page':'Profile'}\r\n            </NavLink>\r\n            </div>\r\n            <div className={classes.item}>< NavLink activeClassName={classes.activeLink} to=\"/dialogs\">Messages\r\n            </NavLink>\r\n            </div>\r\n            <div className={classes.item}>< NavLink activeClassName={classes.activeLink} to=\"/users\">Users\r\n            </NavLink>\r\n            </div>\r\n            <div className={classes.item}><NavLink activeClassName={classes.activeLink} to=\"/news\">News</NavLink></div>\r\n            <div className={classes.item}><NavLink activeClassName={classes.activeLink} to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}><NavLink activeClassName={classes.activeLink}\r\n                                                   to=\"/settings\">Settings</NavLink></div>\r\n            <div className={classes.item}><NavLink activeClassName={classes.activeLink}\r\n                                                   to=\"/friends\">\r\n                <div>\r\n                    Friends\r\n                </div>\r\n            </NavLink>\r\n                {friendsElement}\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar","import React from \"react\";\r\n\r\nconst Friends = ()=> {\r\n    return (\r\n        <div>Friends</div>\r\n    )\r\n}\r\nexport default Friends","import React from \"react\";\r\n\r\nconst Music = ()=> {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\nexport default Music","import React from \"react\";\r\n\r\nconst News = ()=> {\r\n    return (<>\r\n        <div>News</div>\r\n    </>\r\n\r\n\r\n    )\r\n}\r\nexport default News","import React from \"react\";\r\n\r\nconst Settings = ()=> {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\nexport default Settings","import axios from \"axios\";\r\nimport {ProfileType, StatusType} from \"../components/redux/profileReducer\";\r\n\r\nconst axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    // headers: {'API-KEY': 'de342f74-3acb-43a4-b6f0-3143b51bea1e'},\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n})\r\nexport type ResponseType<D={}>={\r\n    resultCode: number\r\n    messages: string[],\r\n    data: D\r\n}\r\nexport const API = {\r\n    profileAPI: {\r\n        getProfileAPI(id: string) {\r\n            return axiosInstance.get<ProfileType>(`profile/${id}`)\r\n        },\r\n        getStatusAPI(id: string) {\r\n            return axiosInstance.get<string>(`profile/status/${id}`)\r\n        },\r\n        updateStatusAPI(status: StatusType) {\r\n            return axiosInstance.put<ResponseType<{status:StatusType}>>(`profile/status/`, {status})\r\n        }\r\n    },\r\n    usersAPI: {\r\n        getUsersAPI(page: number, pageSize: number) {\r\n            return axiosInstance.get(`users?page=${page}&count=${pageSize}`)\r\n        },\r\n        setUnfollowAPI(id: string) {\r\n            return axiosInstance.delete<ResponseType>(`follow/${id}`)\r\n        },\r\n        setFollowAPI(id: string) {\r\n            return axiosInstance.post<ResponseType>(`follow/${id}`)\r\n        },\r\n    },\r\n    authAPI: {\r\n        getAuthMeAPI() {\r\n            return axiosInstance.get<ResponseType<{id:string, email: string, login: string}>>('auth/me')\r\n        },\r\n        Login(email: string|null, password: string|null, rememberMe: boolean=false) {\r\n            return axiosInstance.post<ResponseType<{userId:string}>>('/auth/login', {email, password, rememberMe})\r\n        },\r\n        Logout() {\r\n            return axiosInstance.delete<ResponseType>('/auth/login')\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {Dispatch} from \"react\";\r\nimport {API} from \"../../api/api\";\r\n\r\nexport type SetUsersActionType = {\r\n    type: \"SET_USERS\",\r\n    payload: { users: UserType[] }\r\n}\r\nexport type FollowedActionType = {\r\n    type: 'FOLLOW',\r\n    id: string\r\n}\r\nexport type UnFollowedActionType = {\r\n    type: 'UNFOLLOW',\r\n    id: string\r\n}\r\nexport type SetCurrentPageActionType = {\r\n    type: 'SET_CURRENT_PAGE',\r\n    payload: { currentPage: number }\r\n}\r\nexport type SetTotalUsersCountActionType = {\r\n    type: \"SET_TOTAL_USERS_COUNT\",\r\n    payload: { totalCount: number }\r\n}\r\nexport type SetToggleFetchingActionType = {\r\n    type: \"SET_TOGGLE_FETCHING\",\r\n    payload: { isFetching: boolean }\r\n}\r\nexport type SetFollowingInProgressType = {\r\n    type: \"SET_FOLLOWING_IN_PROGRESS\",\r\n    id: string,\r\n    isFetching: boolean,\r\n}\r\nexport type totalActionType =\r\n    FollowedActionType\r\n    | UnFollowedActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | SetToggleFetchingActionType\r\n    | SetFollowingInProgressType\r\nexport type InitialStateType = {\r\n    users: UserType[],\r\n    pageSize: number,\r\n    totalCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: string[],\r\n}\r\nexport type UserType = {\r\n    name: string,\r\n    id: string,\r\n    photos: {\r\n        small: null | string,\r\n        large: null | string\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const UsersReducer = (state: InitialStateType = initialState, action: totalActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ('FOLLOW') :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.id ? {...u, followed: true} : u),\r\n            }\r\n        case ('UNFOLLOW') :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.id ? {...u, followed: false} : u)\r\n            }\r\n        case'SET_USERS':\r\n        case 'SET_CURRENT_PAGE':\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n        case \"SET_TOGGLE_FETCHING\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case \"SET_FOLLOWING_IN_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(f => f !== action.id)\r\n            }\r\n    }\r\n    return state\r\n}\r\n//actions\r\nexport const onChangeFollow = (id: string): FollowedActionType => {\r\n    return {\r\n        type: 'FOLLOW',\r\n        id\r\n    }\r\n\r\n}\r\nexport const onChangeUnFollow = (id: string): UnFollowedActionType => {\r\n    return {\r\n        type: 'UNFOLLOW',\r\n        id\r\n    }\r\n}\r\nexport const setUsers = (users: UserType[]): SetUsersActionType => {\r\n    return {\r\n        type: 'SET_USERS',\r\n        payload: {users}\r\n    }\r\n\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => {\r\n    return {\r\n        type: 'SET_CURRENT_PAGE',\r\n        payload: {currentPage}\r\n    }\r\n}\r\nexport const setTotalUsersCount = (totalCount: number): SetTotalUsersCountActionType => {\r\n    return {\r\n        type: 'SET_TOTAL_USERS_COUNT',\r\n        payload: {totalCount}\r\n    }\r\n}\r\nexport const setToggleFetching = (isFetching: boolean): SetToggleFetchingActionType => {\r\n    return {\r\n        type: \"SET_TOGGLE_FETCHING\",\r\n        payload: {isFetching}\r\n    }\r\n}\r\nexport const setFollowingInProgress = (isFetching: boolean, id: string): SetFollowingInProgressType => {\r\n    return {\r\n        type: \"SET_FOLLOWING_IN_PROGRESS\",\r\n        id,\r\n        isFetching\r\n    }\r\n}\r\n\r\n//thunks\r\nconst followUnfollowFlow = async (id: string, dispatch: Dispatch<totalActionType>, apiMethod: any, actionCreator: FollowedActionType | UnFollowedActionType) => {\r\n    dispatch(setFollowingInProgress(true, id))\r\n    let response = await apiMethod(id)\r\n    if (response.data.resultCode === 0) dispatch(actionCreator)\r\n    dispatch(setFollowingInProgress(false, id))\r\n\r\n}\r\nexport const getUsersTC = (currentPage: number, pageSize: number) => async (dispatch: Dispatch<totalActionType>) => {\r\n    dispatch(setToggleFetching(true))\r\n    let response = await API.usersAPI.getUsersAPI(currentPage, pageSize)\r\n    dispatch(setToggleFetching(false))\r\n    dispatch(setUsers(response.data.items))\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(setTotalUsersCount(response.data.totalCount))\r\n}\r\nexport const followTC = (id: string) => async (dispatch: Dispatch<totalActionType>) => {\r\n    const apiMethod = API.usersAPI.setUnfollowAPI\r\n    followUnfollowFlow(id, dispatch, apiMethod, onChangeUnFollow(id))\r\n}\r\nexport const unFollowTC = (id: string) => async (dispatch: Dispatch<totalActionType>) => {\r\n    const apiMethod = API.usersAPI.setFollowAPI\r\n    followUnfollowFlow(id, dispatch, apiMethod, onChangeFollow(id))\r\n}\r\n","export default __webpack_public_path__ + \"static/media/no_foto.dcc0fe9d.jpeg\";","import {PaginationLocale} from \"rc-pagination\";\r\n\r\n\r\nexport const localInfo: PaginationLocale = {\r\n    // Options.jsx\r\n    items_per_page: '/ page',\r\n    jump_to: 'Show',\r\n    jump_to_confirm: 'confirm',\r\n    page: '',\r\n\r\n    // Pagination.jsx\r\n    prev_page: 'Previous Page',\r\n    next_page: 'Next Page',\r\n    prev_5: 'Previous 5 Pages',\r\n    next_5: 'Next 5 Pages',\r\n    prev_3: 'Previous 3 Pages',\r\n    next_3: 'Next 3 Pages',\r\n};","import React from \"react\";\r\nimport userDefaultPhoto from \"../../assets/images/no_foto.jpeg\";\r\nimport classes from './Users.module.css'\r\nimport {UserType} from \"../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Pagination from \"rc-pagination\";\r\nimport {localInfo} from \"../common/locale/en_US\";\r\nimport '../../components/common/PaginationStyles/Pagination.css'\r\n\r\ntype PropsType = {\r\n    users: UserType[],\r\n    pageSize: number,\r\n    totalCount: number,\r\n    currentPage: number,\r\n    followingInProgress: string[],\r\n    followCallback: (userID: string) => void,\r\n    unFollowCallback: (userID: string) => void,\r\n    onPageChanged: (pageNumber: number) => void,\r\n}\r\nexport const Users = React.memo((props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            {/*<Paginator pageSize={props.pageSize} currentPage={props.currentPage} onPageChanged={props.onPageChanged}*/}\r\n            {/*           totalItemCount={props.totalCount} portionSize={10} />*/}\r\n\r\n            <Pagination style={{marginTop: '24px', alignSelf: 'flex-start'}}\r\n                        className=\"ant-pagination\"\r\n                        showQuickJumper\r\n                        defaultCurrent={props.currentPage}\r\n                        pageSize={props.pageSize}\r\n                        total={props.totalCount!}\r\n                        locale={localInfo}\r\n                        current={props.currentPage}\r\n                        onChange={props.onPageChanged}/>\r\n\r\n            {props.users.map(u => {\r\n                let path = `/profile/${u.id}`\r\n                return (\r\n                    <div className={classes.container} key={u.id}>\r\n                        <div className={classes.item}>\r\n                            <div className={classes.item_img}>\r\n                                <NavLink to={path}>\r\n                                    <img className={classes.img}\r\n                                         src={u.photos.small != null ? u.photos.small : userDefaultPhoto}\r\n                                         alt=\"myPhoto\"/>\r\n                                </NavLink>\r\n\r\n                            </div>\r\n                            <div className={classes.description}>\r\n                                <div className={classes.name}>\r\n                                    {u.name}\r\n                                    {u.followed ? <button disabled={props.followingInProgress.some(s => s === u.id)}\r\n                                                          className={classes.unfollowedButton} onClick={() => {\r\n                                            props.unFollowCallback(u.id)\r\n                                        }}> unfollow</button> :\r\n                                        <button disabled={props.followingInProgress.some(s => s === u.id)}\r\n                                                className={classes.button}\r\n                                                onClick={() => {\r\n                                                    props.followCallback(u.id)\r\n                                                }}>follow</button>}\r\n                                </div>\r\n                                <div className={classes.location_status}>\r\n                                    <div>\r\n                                        status: '{u.status}'\r\n                                    </div>\r\n                                    <div>\r\n                                        country: {'u.location.country'}\r\n                                    </div>\r\n                                    <div>\r\n                                        city: {'u.location.city'}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <img style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: \"190px\",\r\n            margin: '0 auto'\r\n\r\n        }} src='https://www.blackview.ru/upload/medialibrary/818/8187a44741ec1bc337686b53ce22cc10.gif'\r\n             alt=\"loader\"/>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {\r\n    followTC,\r\n    getUsersTC,\r\n    InitialStateType,\r\n    unFollowTC,\r\n} from \"../redux/usersReducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\n\r\n\r\nexport const UsersContainer = () => {\r\n    const {\r\n        users,\r\n        pageSize,\r\n        totalCount,\r\n        currentPage,\r\n        isFetching,\r\n        followingInProgress,\r\n    } = useSelector<AppStateType, InitialStateType>((state: AppStateType) => state.usersPage)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize))\r\n    }, [dispatch, currentPage, pageSize])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsersTC(pageNumber, pageSize))\r\n    }\r\n    const followCallback = (userId: string) => {\r\n        dispatch(unFollowTC(userId))\r\n    }\r\n    const unFollowCallback = (userId: string) => {\r\n        dispatch(followTC(userId))\r\n    }\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : <Users\r\n            users={users}\r\n            pageSize={pageSize}\r\n            totalCount={totalCount}\r\n            currentPage={currentPage}\r\n            followCallback={followCallback}\r\n            unFollowCallback={unFollowCallback}\r\n            onPageChanged={onPageChanged}\r\n            followingInProgress={followingInProgress}\r\n        />}\r\n    </>\r\n}","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"react\";\r\nimport {API} from \"../../api/api\";\r\n\r\nexport type newPostType = {\r\n    id: string,\r\n    post: string,\r\n    likeCount: number,\r\n    url: string\r\n}\r\nexport type postType = {\r\n    id: string,\r\n    post: string,\r\n    likeCount: number,\r\n    url: string\r\n}\r\nexport type AddPostActionType = {\r\n    type: 'ADD-POST',\r\n    data: string,\r\n}\r\nexport type UpdateNewPostTextActionType = {\r\n    type: \"UPDATE-NEW-POST-TEXT\",\r\n    newPostText: string\r\n}\r\nexport type SetUserProfileActionType = {\r\n    type: \"SET-USER-PROFILE\",\r\n    profile: ProfileType\r\n}\r\nexport type SetProfileStatusActionType = {\r\n    type: \"SET_PROFILE_STATUS\",\r\n    status: StatusType,\r\n}\r\nexport type setIsMeType = ReturnType<typeof setIsMe>\r\nexport type DeletePostActionType = ReturnType<typeof deletePostAC>\r\nexport type TotalActionPostType =\r\n    AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | SetUserProfileActionType\r\n    | SetProfileStatusActionType | setIsMeType | DeletePostActionType\r\nexport type initialStateType = typeof initialState\r\nexport type StatusType = string | null\r\nlet initialState = {\r\n    posts: [\r\n        {\r\n            id: v1(),\r\n            post: 'Hello',\r\n            likeCount: 10,\r\n            url: \"https://avatars.mds.yandex.net/get-zen_doc/1686199/pub_5e3e6d88e6e8eb5b95da89cf_5e3e6e6b6ffb5072de613bf5/scale_1200\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            post: 'My name is Alex',\r\n            likeCount: 20,\r\n            url: \"https://avatars.mds.yandex.net/get-zen_doc/1686199/pub_5e3e6d88e6e8eb5b95da89cf_5e3e6e6b6ffb5072de613bf5/scale_1200\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            post: 'Where are you from?',\r\n            likeCount: 30,\r\n            url: \"https://avatars.mds.yandex.net/get-zen_doc/1686199/pub_5e3e6d88e6e8eb5b95da89cf_5e3e6e6b6ffb5072de613bf5/scale_1200\"\r\n        },\r\n    ],\r\n    profile: {} as ProfileType,\r\n    status: '' as StatusType,\r\n    isMe: false,\r\n}\r\nexport type ProfileType = {\r\n    userId: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string,\r\n        large: string,\r\n    }\r\n}\r\n\r\nexport const ProfileReducer = (state: initialStateType = initialState, action: TotalActionPostType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            let newPost: newPostType = {\r\n                id: v1(),\r\n                post: action.data,\r\n                likeCount: 0,\r\n                url: \"https://avatars.mds.yandex.net/get-zen_doc/1686199/pub_5e3e6d88e6e8eb5b95da89cf_5e3e6e6b6ffb5072de613bf5/scale_1200\"\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n        case \"DELETE-POST\": {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.id),\r\n            }\r\n        }\r\n        case \"SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"SET_PROFILE_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"SET_IS_ME\":\r\n            return {\r\n                ...state,\r\n                isMe: action.isMe\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const addPostAC = (data: string): AddPostActionType => {\r\n    return {\r\n        type: 'ADD-POST',\r\n        data: data,\r\n    } as const\r\n}\r\nexport const deletePostAC = (id: string) => {\r\n    return {\r\n        type: 'DELETE-POST',\r\n        id\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => {\r\n    return {\r\n        type: \"SET-USER-PROFILE\",\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatusProfile = (status: StatusType): SetProfileStatusActionType => {\r\n    return {\r\n        type: \"SET_PROFILE_STATUS\",\r\n        status\r\n    } as const\r\n}\r\nexport const setIsMe = (isMe: boolean) => {\r\n    return {\r\n        type: 'SET_IS_ME',\r\n        isMe\r\n    } as const\r\n}\r\n\r\n//thunks\r\nexport const getProfile = (userID: string) => async (dispatch: Dispatch<TotalActionPostType>) => {\r\n    let response = await API.profileAPI.getProfileAPI(userID)\r\n    console.log(response)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport const getStatus = (userID: string) => async (dispatch: Dispatch<TotalActionPostType>) => {\r\n    let response = await API.profileAPI.getStatusAPI(userID)\r\n        console.log(response)\r\n        dispatch(setStatusProfile(response.data))\r\n}\r\nexport const updateStatus = (status: StatusType) => async (dispatch: Dispatch<TotalActionPostType>) => {\r\n   let response = await API.profileAPI.updateStatusAPI(status)\r\n        if (response.data.resultCode === 0) dispatch(setStatusProfile(status))\r\n}","import { v1 } from \"uuid\";\r\nexport type friendsType = {\r\n    id: string,\r\n    name: string,\r\n    url: string\r\n}\r\nexport type friendsPageType = {\r\n    friends: friendsType[]\r\n}\r\nlet initialState:friendsPageType = {\r\n    friends: [\r\n        {\r\n            id: v1(),\r\n            name: 'Johnny',\r\n            url: 'http://almode.ru/uploads/posts/2020-07/1593623044_12-p-dzhonni-galeki-16.jpg'\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: 'Melissa',\r\n            url: 'https://i.pinimg.com/originals/c6/9c/f4/c69cf4a6e3f5766cc7acc3946bb1bb4a.jpg'\r\n        },\r\n        {id: v1(), name: 'Wil', url: 'https://vistapointe.net/images/wil-wheaton-wallpaper-13.jpg'},\r\n    ]\r\n}\r\n\r\nexport const FriendsReducer = (state:friendsPageType=initialState, action:any):friendsPageType=>{\r\n    return state\r\n}","import {Dispatch} from \"react\";\r\nimport {API} from \"../../api/api\";\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    message: null,\r\n}\r\n\r\nexport type InitialStateType = {\r\n    id: string | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    message: string | null\r\n}\r\nexport type TotalActionType = setAuthUserDataType | setMessagesLoginType\r\ntype setAuthUserDataType = ReturnType<typeof setAuthUserData>\r\ntype setMessagesLoginType = ReturnType<typeof setMessagesLogin>\r\nexport const AuthReducer = (state: InitialStateType = initialState, action: TotalActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n        case \"SET_MESSAGES_LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setAuthUserData = (id: string | null,\r\n                                email: string | null,\r\n                                login: string | null,\r\n                                isAuth: boolean) => {\r\n    return {\r\n        type: 'SET_USER_DATA',\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth,\r\n        } as const\r\n    }\r\n}\r\n\r\nexport const setMessagesLogin = (message: string | null) => {\r\n    return {\r\n        type: 'SET_MESSAGES_LOGIN',\r\n        payload: {message}\r\n    } as const\r\n\r\n}\r\n//thunks\r\nexport const getAuthMeTC = () => async (dispatch: Dispatch<TotalActionType>) => {\r\n    let response = await API.authAPI.getAuthMeAPI()\r\n    if (response.data.resultCode === 0) {\r\n        const {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const loginIn = (email: string | null, password: string | null, rememberMe: boolean) => async (dispatch: Dispatch<any>) => {\r\n    let response = await API.authAPI.Login(email, password, rememberMe)\r\n    const {messages} = response.data\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthMeTC())\r\n        dispatch(setMessagesLogin(null))\r\n    } else if (response.data.resultCode === 1) {\r\n        dispatch(setMessagesLogin(messages[0]))\r\n    }\r\n}\r\nexport const logOut = () => async (dispatch: Dispatch<TotalActionType>) => {\r\n    let response = await API.authAPI.Logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n        dispatch(setMessagesLogin(null))\r\n    }\r\n}","import { Dispatch } from \"redux\";\r\nimport {getAuthMeTC} from \"./authReducer\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\ntype SetInitializedType = ReturnType<typeof setInitialized>\r\nexport const appReducer = (state = initialState, action: SetInitializedType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_INITIALIZED':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setInitialized = () => {\r\n    return {\r\n        type: 'SET_INITIALIZED',\r\n    } as const\r\n}\r\n//Thunks\r\nexport const initializeApp = () => (dispatch:Dispatch<any>) => {\r\n    const promise = dispatch(getAuthMeTC())\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(setInitialized())\r\n    })\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport {ProfileReducer} from \"./profileReducer\";\r\nimport {DialogsReducer} from \"./dialogsReducer\";\r\nimport {FriendsReducer} from \"./friendsReducer\";\r\nimport {UsersReducer} from \"./usersReducer\";\r\nimport {AuthReducer} from \"./authReducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./appReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    dialogsPage: DialogsReducer,\r\n    friendsPage: FriendsReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// let store = createStore(rootReducer, applyMiddleware(thunk))\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\nexport default store\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {StatusType} from \"../../redux/profileReducer\";\r\n\r\n\r\ntype PropsType = {\r\n    status: StatusType,\r\n    isMe: boolean,\r\n    updateStatusCB: (status: StatusType) => void\r\n}\r\nexport const ProfileStatus = React.memo((props: PropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [statusValue, setStatusValue] = useState<any>(props.status)\r\n    useEffect(() => {\r\n        setStatusValue(props.status)\r\n    }, [props])\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setStatusValue(props.status)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusCB(statusValue)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <div>\r\n                <input onBlur={activateViewMode} autoFocus value={statusValue} onChange={onChangeStatus} type=\"text\"/>\r\n            </div>\r\n            :\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status ? `🖉   ${props.status}` : 'no status'}</span>\r\n            </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport {ProfileType, StatusType} from \"../../redux/profileReducer\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport userDefaultPhoto from \"../../../assets/images/no_foto.jpeg\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType,\r\n    status: StatusType,\r\n    updateStatusCB: (status: StatusType) => void,\r\n    isMe: boolean,\r\n}\r\nconst ProfileInfo = React.memo((props: PropsType) => {\r\n    return (<>\r\n            {!Object.keys(props.profile).length && <span>\r\n                <Preloader/> not found</span>} {\r\n            Object.keys(props.profile).length &&\r\n            <div className={classes.container}>\r\n                <div className={classes.avatar}>\r\n                    <img src={props.profile.photos.large != null ? props.profile.photos.large : userDefaultPhoto}\r\n                         alt=\"ava\"/>\r\n                </div>\r\n\r\n                <div className={classes.description}>\r\n                    <div>\r\n                        Name: {props.profile.fullName}\r\n                    </div>\r\n                    {props.isMe ?\r\n                        <ProfileStatus status={props.status}\r\n                                       isMe={props.isMe}\r\n                                       updateStatusCB={props.updateStatusCB}\r\n                        /> :\r\n                        <div>\r\n                            <span>{props.status ? props.status : 'no status'}</span>\r\n                        </div>\r\n                    }\r\n\r\n\r\n                    <div className={classes.contacts}>\r\n                        Contacts:\r\n                        <div>{props.profile.contacts.vk}</div>\r\n                        <div>{props.profile.contacts.facebook}</div>\r\n                        <div>{props.profile.contacts.github}</div>\r\n                        <div>{props.profile.contacts.twitter}</div>\r\n                        <div>{props.profile.contacts.instagram}</div>\r\n                    </div>\r\n\r\n                    <div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </>\r\n    )\r\n})\r\nexport default ProfileInfo","import React from \"react\";\r\nimport classes from './Post.module.css'\r\nimport {postType} from \"../../../redux/profileReducer\";\r\n\r\nconst Post = (props:postType) => {\r\n    return (\r\n        <div className={classes.post}>\r\n            <img\r\n                src={props.url}\r\n                alt=\"ava\"/>\r\n            {props.post}\r\n            <div>\r\n                <span>like {props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post","import React from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {postType} from \"../../redux/profileReducer\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\n\r\nexport type inputForPostType = {\r\n    post: string,\r\n};\r\ntype PropsType = {\r\n    posts: postType[],\r\n    addNewPost: (data: string) => void,\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n    const {register, handleSubmit, formState: {errors}} = useForm<inputForPostType>();\r\n    const onSubmit: SubmitHandler<inputForPostType> = data => props.addNewPost(data.post)\r\n\r\n    const postElement = props.posts.map(p => {\r\n        return (\r\n            <Post post={p.post} key={p.id} likeCount={p.likeCount} url={p.url} id={p.id}/>\r\n        )\r\n    })\r\n    return (\r\n        <div className={classes.myPosts}>\r\n            <form className={classes.container} onSubmit={handleSubmit(onSubmit)}>\r\n                <input placeholder=\"add your post\" {...register('post', {required: true})} />\r\n                {errors.post && <span>This field is empty</span>}\r\n                <input value={'send'} className={classes.btnAddPost} type=\"submit\"/>\r\n            </form>\r\n            {postElement}\r\n        </div>\r\n    )\r\n})\r\nexport default MyPosts","import React from \"react\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    addPostAC,\r\n    initialStateType,\r\n} from \"../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nexport const MyPostsContainer = () => {\r\n    const {posts} = useSelector<AppStateType, initialStateType>((state) =>\r\n        state.profilePage\r\n    )\r\n    const dispatch = useDispatch()\r\n    const addPostCallBack = (data:string) => {\r\n        dispatch(addPostAC(data))\r\n    }\r\n    return (\r\n        <MyPosts\r\n            posts={posts}\r\n            addNewPost={addPostCallBack}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType, StatusType} from \"../redux/profileReducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType,\r\n    status: StatusType,\r\n    updateStatusCB:(status:StatusType)=>void\r\n    isMe: boolean,\r\n}\r\nconst Profile = React.memo((props: PropsType) => {\r\n    return (\r\n        <div className={classes.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                isMe={props.isMe}\r\n                updateStatusCB={props.updateStatusCB}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n})\r\nexport default Profile","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {getProfile, getStatus, ProfileType, setIsMe, StatusType, updateStatus} from \"../redux/profileReducer\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {InitialStateType} from \"../redux/authReducer\";\r\n\r\n\r\nexport type ParamsType = {\r\n    userID: string\r\n}\r\n\r\nexport const ProfileContainer = () => {\r\n    let {userID} = useParams<ParamsType>()\r\n    const dispatch = useDispatch()\r\n    const {isAuth} = useSelector<AppStateType, InitialStateType>(state => state.auth)\r\n    const myId = useSelector<AppStateType, string | null>(state => state.auth.id)\r\n    const profile = useSelector<AppStateType, ProfileType>((state) => state.profilePage.profile)\r\n    const status = useSelector<AppStateType, StatusType>((state) => state.profilePage.status)\r\n    const isMe = useSelector<AppStateType, boolean>((state) => state.profilePage.isMe)\r\n\r\n\r\n    const updateStatusCB = (status: StatusType) => {\r\n        dispatch(updateStatus(status))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!userID && myId) {\r\n            userID = myId\r\n            dispatch(setIsMe(true))\r\n        } else if (!myId) {\r\n            dispatch(setIsMe(false))\r\n        } else if (userID) {\r\n            dispatch(setIsMe(false))\r\n        }\r\n        dispatch(getProfile(userID))\r\n        dispatch(getStatus(userID))\r\n    }, [dispatch, userID])\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n        <Profile\r\n            profile={profile}\r\n            status={status}\r\n            isMe={isMe}\r\n            updateStatusCB={updateStatusCB}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from './Header.module.css';\r\n\r\ntype PropsType = {\r\n    id: string | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n    logoutCB: () => void\r\n}\r\nconst Header = React.memo((props: PropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <div className={classes.container}>\r\n                <img src=\"https://cdn.icon-icons.com/icons2/832/PNG/512/vk_icon-icons.com_66681.png\" alt=\"logo\"/>\r\n                <div>\r\n                    {props.isAuth ?\r\n                        <div className={classes.login}>\r\n                            <NavLink\r\n                                activeClassName={classes.activeLink} to={'/login'}>\r\n                                {props.login}\r\n                            </NavLink>\r\n                            <button onClick={props.logoutCB}>logout</button>\r\n                        </div>\r\n                        :\r\n                        <>\r\n                            <NavLink\r\n                                activeClassName={classes.activeLink} to={'/login'}>\r\n                                Login\r\n                            </NavLink>\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n})\r\nexport default Header","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {InitialStateType} from \"../redux/authReducer\";\r\n\r\ntype PropsType = {\r\n    logoutCB: () => void\r\n}\r\n\r\nexport const HeaderContainer = (props: PropsType) => {\r\n    const {id, email, login, isAuth} = useSelector<AppStateType, InitialStateType>(state => state.auth)\r\n\r\n    return (\r\n        <Header\r\n            id={id}\r\n            email={email}\r\n            login={login}\r\n            isAuth={isAuth}\r\n            logoutCB={props.logoutCB}\r\n        />\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {useForm, SubmitHandler} from \"react-hook-form\";\r\nimport classes from './Login.module.css'\r\nimport {InitialStateType, loginIn} from \"../redux/authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type Inputs = {\r\n    email: string|null,\r\n    password: string|null,\r\n    rememberMe: boolean,\r\n};\r\nexport const Login = React.memo(() => {\r\n    const {isAuth} = useSelector<AppStateType, InitialStateType>(state=>state.auth)\r\n    if(isAuth) return <Redirect to={'/profile'}/>\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm/>\r\n        </div>\r\n    )\r\n})\r\nexport const LoginForm = React.memo(() => {\r\n    const {message} = useSelector<AppStateType, InitialStateType>(state=>state.auth)\r\n    const dispatch = useDispatch()\r\n    const {register, handleSubmit, formState: {errors}} = useForm<Inputs>({mode: \"onChange\"});\r\n    const onSubmit: SubmitHandler<Inputs> = (data) => dispatch(loginIn(data.email, data.password, data.rememberMe))\r\n    return (\r\n        <form className = {classes.container} onSubmit={handleSubmit(onSubmit)}>\r\n            <input placeholder=\"email\" {...register('email',  {required: true, maxLength:30 })} />\r\n            {errors.email && <span>field is errored</span>}\r\n            <input type={'password'} placeholder=\"password\"{...register(\"password\", {required: true})} />\r\n            {errors.password && <span>field is errored</span>}\r\n            <input type='checkbox'{...register(\"rememberMe\")} />\r\n            {message&&<div className={classes.errorMessage}>{message}</div>}\r\n            <input value={'Sign in'} type=\"submit\"/>\r\n        </form>\r\n    )\r\n})","import React, {lazy, Suspense, useEffect} from 'react';\nimport './App.css';\nimport NavBar from \"./components/Navbar/NavBar\";\nimport Friends from \"./components/Friends/Friends\";\nimport Music from \"./components/Music/Music\";\nimport {BrowserRouter, Route} from \"react-router-dom\"\nimport News from \"./components/News/News\";\nimport Settings from \"./components/Settings/Settings\";\n// import {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\nimport store, {AppStateType} from \"./components/redux/redux-store\";\nimport {ProfileContainer} from \"./components/Profile/ProfileContainer\";\nimport {HeaderContainer} from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {Provider, useDispatch, useSelector} from \"react-redux\";\nimport {logOut} from \"./components/redux/authReducer\";\nimport {initializeApp, InitialStateType} from \"./components/redux/appReducer\";\nimport {Preloader} from \"./components/common/preloader/Preloader\";\n\nconst DialogsContainer = lazy(() =>\n    import('./components/Dialogs/DialogsContainer')\n        .then((module) => ({default: module.DialogsContainer})))\n// const ProfileContainer = lazy(() =>\n//     import('./components/Profile/ProfileContainer')\n//         .then((module) => ({default: module.ProfileContainer})))\ntype PropsType = {\n    store: AppStateType\n}\n\nexport const App = (props: PropsType) => {\n    const {initialized} = useSelector<AppStateType, InitialStateType>(state => state.app)\n    const friendsPage = props.store.friendsPage\n    const dispatch = useDispatch()\n    const logoutCB = () => {\n        dispatch(logOut())\n    }\n    useEffect(() => {\n        dispatch(initializeApp())\n    }, [dispatch])\n\n    // if (!initialized) return <Preloader/>\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer\n                logoutCB={logoutCB}\n            />\n            <NavBar friendsPage={friendsPage}/>\n            <div className='app-wrapper-content'>\n                <Route path='/profile' render={() => <ProfileContainer/>}/>\n\n                <Route path='/profile/:userID?' render={() => <ProfileContainer/>}/>\n                <Route path='/dialogs/' render={() => {\n                    return <Suspense fallback={<div>...loading</div>}>\n                        <DialogsContainer/>\n                    </Suspense>\n                }}/>\n                <Route path='/users' render={() => <UsersContainer/>}/>\n                <Route path='/news' render={() => <News/>}/>\n                <Route path='/music' render={() => <Music/>}/>\n                <Route path='/settings' render={() => <Settings/>}/>\n                <Route path='/friends' render={() => <Friends/>}/>\n                <Route path='/login' render={() => <Login/>}/>\n            </div>\n\n        </div>\n    )\n}\nexport const MainApp = () => {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <App store={store.getState()}/>\n            </Provider>\n        </BrowserRouter>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {MainApp} from './App';\n\n\nReactDOM.render(\n    <MainApp/>,\n    document.getElementById('root')\n)\n\n\n\n"],"sourceRoot":""}