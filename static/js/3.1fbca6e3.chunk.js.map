{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","React","memo","props","path","id","className","classes","item","activeClassName","activeLink","to","itemUser","src","url","name","Message","message","Dialogs","dialogsElement","dialogs","map","d","messageElement","messages","m","useForm","register","handleSubmit","errors","formState","dialogsItems","container","onSubmit","data","addMessage","placeholder","required","value","btnDialogs","type","DialogsContainer","isAuth","useSelector","state","auth","dialogsPage","dispatch","useDispatch","addMessageAC"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,sBAAsB,SAAW,0BAA0B,KAAO,sBAAsB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,8B,2JCsBhTC,EAdIC,IAAMC,MAAK,SAACC,GAC3B,IAAIC,EAAI,mBAAeD,EAAME,IAC7B,OACI,qBAAKC,UAAWC,IAAQC,KAAxB,SACI,cAAC,IAAD,CAASC,gBAAiBF,IAAQG,WAAYC,GAAIP,EAAlD,SACI,sBAAKE,UAAWC,IAAQK,SAAxB,UACI,qBAAKC,IAAKV,EAAMW,MAChB,sBAAMR,UAAWC,IAAQQ,KAAzB,SAAgCZ,EAAMY,iBCH3CC,EANC,SAACb,GACb,OACI,sBAAKG,UAAWC,IAAQU,QAAxB,cAAmCd,EAAMc,Y,QCsClCC,EA/BCjB,IAAMC,MAAK,SAACC,GACxB,IAAMgB,EAAiBhB,EAAMiB,QAAQC,KAAI,SAAAC,GACrC,OACI,cAAC,EAAD,CAAuBjB,GAAIiB,EAAEjB,GAAIU,KAAMO,EAAEP,KAAMD,IAAKQ,EAAER,KAArCQ,EAAEjB,OAGrBkB,EAAiBpB,EAAMqB,SAASH,KAAI,SAAAI,GACtC,OACI,cAAC,EAAD,CAASR,QAASQ,EAAER,QAASZ,GAAIoB,EAAEpB,IAASoB,EAAEpB,OAGtD,EAAsDqB,cAA/CC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAA0BC,EAA3C,EAA+BC,UAAYD,OAE3C,OACI,sBAAKvB,UAAWC,IAAQa,QAAxB,UACI,qBAAKd,UAAWC,IAAQwB,aAAxB,SACKZ,IAEL,sBAAKb,UAAWC,IAAQiB,SAAxB,UACI,8BACI,uBAAMlB,UAAWC,IAAQyB,UAAWC,SAAUL,GARb,SAAAM,GAAI,OAAI/B,EAAMgC,WAAWD,EAAKjB,YAQ/D,UACI,mCAAOmB,YAAY,oBAAuBT,EAAS,UAAW,CAACU,UAAU,MACxER,EAAOZ,SAAW,uDACnB,uBAAOqB,MAAO,OAAQhC,UAAWC,IAAQgC,WAAYC,KAAK,gBAGjEjB,W,cC/BJkB,EAAmB,WAC5B,IAAOC,EAAUC,aAA4C,SAAAC,GAAK,OAAEA,EAAMC,QAAnEH,OACP,EAA4BC,aAA2C,SAACC,GAAD,OAAWA,EAAME,eAAjFtB,EAAP,EAAOA,SAAUJ,EAAjB,EAAiBA,QACX2B,EAAWC,cAKjB,OAAIN,EAEA,cAAC,EAAD,CACIlB,SAAUA,EACVJ,QAASA,EACTe,WATmB,SAACD,GACxBa,EAASE,YAAaf,OAGP,cAAC,IAAD,CAAUvB,GAAI","file":"static/js/3.1fbca6e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2ldGS\",\"dialogsItems\":\"Dialogs_dialogsItems__37S8F\",\"item\":\"Dialogs_item__3ogF1\",\"itemUser\":\"Dialogs_itemUser__2Y_mY\",\"name\":\"Dialogs_name__36brx\",\"activeLink\":\"Dialogs_activeLink__PAaPc\",\"messages\":\"Dialogs_messages__28Nn7\",\"message\":\"Dialogs_message__3XwXP\",\"btnDialogs\":\"Dialogs_btnDialogs__chiBE\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    name: string,\r\n    url: string\r\n}\r\nconst DialogItem = React.memo((props: PropsType) => {\r\n    let path = `/dialogs/${props.id}`\r\n    return (\r\n        <div className={classes.item}>\r\n            <NavLink activeClassName={classes.activeLink} to={path}>\r\n                <div className={classes.itemUser}>\r\n                    <img src={props.url}/>\r\n                    <span className={classes.name}>{props.name}</span>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\ntype PropsType = {\r\n    message: string | undefined,\r\n    id: string\r\n}\r\nconst Message = (props:PropsType) => {\r\n    return (\r\n        <div className={classes.message}> {props.message}</div>\r\n\r\n    )\r\n}\r\nexport default Message","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {dialogType, messageType, newMessageType} from \"../redux/dialogsReducer\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\n\r\nexport type inputForDialogs = {\r\n    message: string,\r\n};\r\ntype PropsType = {\r\n    messages: messageType[]\r\n    dialogs: dialogType[]\r\n    addMessage: (data: string) => void,\r\n}\r\n\r\nconst Dialogs = React.memo((props: PropsType) => {\r\n    const dialogsElement = props.dialogs.map(d => {\r\n        return (\r\n            <DialogItem key={d.id} id={d.id} name={d.name} url={d.url}/>\r\n        )\r\n    })\r\n    const messageElement = props.messages.map(m => {\r\n        return (\r\n            <Message message={m.message} id={m.id} key={m.id}/>\r\n        )\r\n    })\r\n    const {register, handleSubmit, formState: {errors}} = useForm<inputForDialogs>();\r\n    const onSubmit: SubmitHandler<inputForDialogs> = data => props.addMessage(data.message)\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    <form className={classes.container} onSubmit={handleSubmit(onSubmit)}>\r\n                        <input placeholder=\"add your message\" {...register('message', {required: true})} />\r\n                        {errors.message && <span>This field is empty</span>}\r\n                        <input value={'send'} className={classes.btnDialogs} type=\"submit\"/>\r\n                    </form>\r\n                </div>\r\n                {messageElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Dialogs","import React from \"react\";\r\nimport {\r\n    AppStateType,\r\n} from \"../redux/redux-store\";\r\nimport {addMessageAC, dialogsPageType} from \"../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {InitialStateType} from \"../redux/authReducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\nexport const DialogsContainer = () => {\r\n    const {isAuth} = useSelector<AppStateType, InitialStateType>(state=>state.auth)\r\n    const {messages, dialogs} = useSelector<AppStateType, dialogsPageType>((state) => state.dialogsPage)\r\n    const dispatch = useDispatch()\r\n    const addMessageCallBack = (data:string) => {\r\n        dispatch(addMessageAC(data))\r\n    }\r\n\r\n    if(!isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n        <Dialogs\r\n            messages={messages}\r\n            dialogs={dialogs}\r\n            addMessage={addMessageCallBack}\r\n        />\r\n    )\r\n}"],"sourceRoot":""}